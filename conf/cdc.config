/*
==========================================================================================
    Nextflow config file for Rosalind HPC at CDC
==========================================================================================
    This is a configuration file to run Nextflow pipeline on CDC's Sun Grid Engine, and is 
    configured to optimally schedule jobs to various queues and handles resource limits, 
    which in turn prevents many scheduling errors. This config also sets necessary parameters 
    for Conda and Singularity, and disables Docker. Note that temporary and cache directories 
    are defined below, and you should change them if necessary. This config file should be 
    passed to the Nextflow run command using -C, which will overwrite default configs.
----------------------------------------------------------------------------------------
*/

// Config options
config_profile_name        = 'CDC'
config_profile_description = 'Rosalind HPC @ CDC'
custom_config_version      = 'master'
custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
config_profile_contact     = 'OAMD'
config_profile_url         = 'https://info.biotech.cdc.gov/info/'


/*
==========================================================================================
    CDC Rosalind, and Singularity sge profiles
==========================================================================================
*/

profiles {
  singularity {
    // Enable Singularity features.
    singularity.enabled    = true
    singularity.autoMounts = true

    // Disable other container software.
    docker.enabled         = false
    conda.enabled          = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    
    // Prevents mounting errors in Singularity container creation caused by bad TMPDIR creation.
    process {
        scratch = false
    }
  }
  rosalind {
    singularity.enabled     = true
    singularity.autoMounts  = true
    conda.enabled           = false
    conda.useMamba          = false
    docker.enabled          = false
    podman.enabled          = false
    shifter.enabled         = false
    charliecloud.enabled    = false
    apptainer.enabled       = false

    executor {
      name = 'sge'
      queueSize = 24
      pollInterval = '10sec'
      submitRateLimit = '2sec'
    }
    process {
      // Executor information
      executor = 'sge'
      //jobName = { "$task.name - $task.hash" }
      penv = 'smp'
      queue = { task.time <= 4.h ? 'short.q' : task.time > 7.day ? 'long.q' : 'all.q' }

      // Disable docker by default
      docker.enabled = false

      // Default resources - expected to be overwritten
      memory = '32.GB'
      cpus = 12
      time = '72.h'

      // Set h_vmem option for qsub submissions. +20 memory to h_vmem prevents memory allocation errors.
      clusterOptions = { "-l h_vmem=${(check_max((task.memory.toGiga())+20), 'memory').toString().replaceAll(/[\sB]/,'')}G" }
      // clusterOptions = { "-l h_vmem=${task.memory.toGiga()}G" }
      
      // Error handling - increases resources on each retry. Try to ignore errors and continue if not in errors listed.
      errorStrategy = { task.exitStatus in [143,137,104,134,139,140,71,255] ? 'retry' : 'ignore' }
      maxRetries    = 3
      maxErrors     = '-1'

      withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
      }
      withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
      }
      withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
      }
      withLabel:process_high {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 128.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }
      }
      withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
      }
      withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
      }
      withLabel:error_ignore {
        errorStrategy = 'ignore'
      }
      withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
      }
    }
  }
}